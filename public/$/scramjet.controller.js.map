{"version":3,"file":"scramjet.controller.js","sources":["webpack://@mercuryworkshop/scramjet/./src/controller/frame.ts","webpack://@mercuryworkshop/scramjet/./src/log.ts","webpack://@mercuryworkshop/scramjet/./src/symbols.ts","webpack://@mercuryworkshop/scramjet/./node_modules/@webreflection/idb-map/index.js","webpack://@mercuryworkshop/scramjet/./src/controller/index.ts"],"sourcesContent":["import { ScramjetController } from \".\";\nimport type { ScramjetClient } from \"../client/client\";\nimport { SCRAMJETCLIENT, SCRAMJETFRAME } from \"../symbols\";\n\nexport class ScramjetFrame extends EventTarget {\n\tconstructor(\n\t\tprivate controller: ScramjetController,\n\t\tpublic frame: HTMLIFrameElement\n\t) {\n\t\tsuper();\n\t\tframe[SCRAMJETFRAME] = this;\n\t}\n\n\tget client(): ScramjetClient {\n\t\treturn this.frame.contentWindow.window[SCRAMJETCLIENT];\n\t}\n\n\tgo(url: string | URL) {\n\t\tif (url instanceof URL) url = url.toString();\n\n\t\tdbg.log(\"navigated to\", url);\n\n\t\tthis.frame.src = this.controller.encodeUrl(url);\n\t}\n\n\tback() {\n\t\tthis.frame.contentWindow?.history.back();\n\t}\n\n\tforward() {\n\t\tthis.frame.contentWindow?.history.forward();\n\t}\n}\n","export default {\n\tfmt: function (severity: string, message: string, ...args: any[]) {\n\t\tconst old = Error.prepareStackTrace;\n\n\t\tError.prepareStackTrace = (_, stack) => {\n\t\t\tstack.shift(); // stack();\n\t\t\tstack.shift(); // fmt();\n\t\t\tstack.shift();\n\n\t\t\tlet fmt = \"\";\n\t\t\tfor (let i = 1; i < Math.min(2, stack.length); i++) {\n\t\t\t\tif (stack[i].getFunctionName()) {\n\t\t\t\t\t// const f = stack[i].getThis()?.constructor?.name;\n\t\t\t\t\t// if (f) fmt += `${f}.`\n\t\t\t\t\tfmt += `${stack[i].getFunctionName()} -> ` + fmt;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfmt += stack[0].getFunctionName();\n\n\t\t\treturn fmt;\n\t\t};\n\n\t\tconst fmt = (function stack() {\n\t\t\ttry {\n\t\t\t\tthrow new Error();\n\t\t\t} catch (e) {\n\t\t\t\treturn e.stack;\n\t\t\t}\n\t\t})();\n\n\t\tError.prepareStackTrace = old;\n\n\t\tconst fn = console[severity] || console.log;\n\t\tconst bg = {\n\t\t\tlog: \"#000\",\n\t\t\twarn: \"#f80\",\n\t\t\terror: \"#f00\",\n\t\t\tdebug: \"transparent\",\n\t\t}[severity];\n\t\tconst fg = {\n\t\t\tlog: \"#fff\",\n\t\t\twarn: \"#fff\",\n\t\t\terror: \"#fff\",\n\t\t\tdebug: \"gray\",\n\t\t}[severity];\n\t\tconst padding = {\n\t\t\tlog: 2,\n\t\t\twarn: 4,\n\t\t\terror: 4,\n\t\t\tdebug: 0,\n\t\t}[severity];\n\n\t\tfn(\n\t\t\t`%c${fmt}%c ${message}`,\n\t\t\t`\nbackground-color: ${bg};\ncolor: ${fg};\npadding: ${padding}px;\nfont-weight: bold;\nfont-family: monospace;\nfont-size: 0.9em;\n`,\n\t\t\t`\n${severity === \"debug\" ? \"color: gray\" : \"\"}\n`,\n\t\t\t...args\n\t\t);\n\t},\n\tlog: function (message: string, ...args: any[]) {\n\t\tthis.fmt(\"log\", message, ...args);\n\t},\n\twarn: function (message: string, ...args: any[]) {\n\t\tthis.fmt(\"warn\", message, ...args);\n\t},\n\terror: function (message: string, ...args: any[]) {\n\t\tthis.fmt(\"error\", message, ...args);\n\t},\n\tdebug: function (message: string, ...args: any[]) {\n\t\tthis.fmt(\"debug\", message, ...args);\n\t},\n};\n","// see types.d.ts for what these mean\nexport const SCRAMJETCLIENT = Symbol.for(\"scramjet client global\");\nexport const SCRAMJETFRAME = Symbol.for(\"scramjet frame handle\");\n","const { assign } = Object;\n\nconst STORAGE = 'entries';\nconst READONLY = 'readonly';\nconst READWRITE = 'readwrite';\n\n/**\n * @typedef {Object} IDBMapOptions\n * @prop {'strict' | 'relaxed' | 'default'} [durability]\n * @prop {string} [prefix]\n */\n\n/** @typedef {[IDBValidKey, unknown]} IDBMapEntry */\n\n/** @type {IDBMapOptions} */\nconst defaultOptions = { durability: 'default', prefix: 'IDBMap' };\n\n/**\n * @template T\n * @param {{ target: IDBRequest<T> }} event\n * @returns {T}\n */\nconst result = ({ target: { result } }) => result;\n\nexport default class IDBMap extends EventTarget {\n  // Privates\n  /** @type {Promise<IDBDatabase>} */ #db;\n  /** @type {IDBMapOptions} */ #options;\n  /** @type {string} */ #prefix;\n\n  /**\n   * @template T\n   * @param {(store: IDBObjectStore) => IDBRequest<T>} what\n   * @param {'readonly' | 'readwrite'} how\n   * @returns {Promise<T>}\n   */\n  async #transaction(what, how) {\n    const db = await this.#db;\n    const t = db.transaction(STORAGE, how, this.#options);\n    return new Promise((onsuccess, onerror) => assign(\n      what(t.objectStore(STORAGE)),\n      {\n        onsuccess,\n        onerror,\n      }\n    ));\n  }\n\n  /**\n   * @param {string} name\n   * @param {IDBMapOptions} options\n   */\n  constructor(\n    name,\n    {\n      durability = defaultOptions.durability,\n      prefix = defaultOptions.prefix,\n    } = defaultOptions\n  ) {\n    super();\n    this.#prefix = prefix;\n    this.#options = { durability };\n    this.#db = new Promise((resolve, reject) => {\n      assign(\n        indexedDB.open(`${this.#prefix}/${name}`),\n        {\n          onupgradeneeded({ target: { result, transaction } }) {\n            if (!result.objectStoreNames.length)\n              result.createObjectStore(STORAGE);\n            transaction.oncomplete = () => resolve(result);\n          },\n          onsuccess(event) {\n            resolve(result(event));\n          },\n          onerror(event) {\n            reject(event);\n            this.dispatchEvent(event);\n          },\n        },\n      );\n    }).then(result => {\n      const boundDispatch = this.dispatchEvent.bind(this);\n      for (const key in result) {\n        if (key.startsWith('on'))\n          result[key] = boundDispatch;\n      }\n      return result;\n    });\n  }\n\n  // EventTarget Forwards\n  /**\n   * @param {Event} event\n   * @returns \n   */\n  dispatchEvent(event) {\n    const { type, message, isTrusted } = event;\n    return super.dispatchEvent(\n      // avoid re-dispatching of the same event\n      isTrusted ?\n        assign(new Event(type), { message }) :\n        event\n    );\n  }\n\n  // IDBDatabase Forwards\n  async close() {\n    (await this.#db).close();\n  }\n\n  // Map async API\n  get size() {\n    return this.#transaction(\n      store => store.count(),\n      READONLY,\n    ).then(result);\n  }\n\n  async clear() {\n    await this.#transaction(\n      store => store.clear(),\n      READWRITE,\n    );\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   */\n  async delete(key) {\n    await this.#transaction(\n      store => store.delete(key),\n      READWRITE,\n    );\n  }\n\n  /**\n   * @returns {Promise<IDBMapEntry[]>}\n   */\n  async entries() {\n    const keys = await this.keys();\n    return Promise.all(keys.map(key => this.get(key).then(value => [key, value])));\n  }\n\n  /**\n   * @param {(unknown, IDBValidKey, IDBMap) => void} callback\n   * @param {unknown} [context]\n   */\n  async forEach(callback, context = this) {\n    for (const [key, value] of await this.entries())\n      await callback.call(context, value, key, this);\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   * @returns {Promise<unknown | undefined>}\n   */\n  async get(key) {\n    const value = await this.#transaction(\n      store => store.get(key),\n      READONLY,\n    ).then(result);\n    return value;\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   */\n  async has(key) {\n    const k = await this.#transaction(\n      store => store.getKey(key),\n      READONLY,\n    ).then(result);\n    return k !== void 0;\n  }\n\n  async keys() {\n    const keys = await this.#transaction(\n      store => store.getAllKeys(),\n      READONLY,\n    ).then(result);\n    return keys;\n  }\n\n  /**\n   * @param {IDBValidKey} key\n   * @param {unknown} value\n   */\n  async set(key, value) {\n    await this.#transaction(\n      store => store.put(value, key),\n      READWRITE,\n    );\n    return this;\n  }\n\n  async values() {\n    const keys = await this.keys();\n    return Promise.all(keys.map(key => this.get(key)));\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.#prefix;\n  }\n}\n","import IDBMap from \"@webreflection/idb-map\";\nimport { ScramjetConfig } from \"../types\";\nimport { Codec } from \"../codecs\";\nimport type { ScramjetClient } from \"../client/client\";\nimport { ScramjetFrame } from \"./frame\";\n\nexport class ScramjetController {\n\tconfig: ScramjetConfig;\n\tprivate store: IDBMap;\n\tcodec: Codec;\n\n\tconstructor(config: ScramjetConfig) {\n\t\tconst defaultConfig: Partial<ScramjetConfig> = {\n\t\t\tprefix: \"/scramjet/\",\n\t\t\tcodec: \"plain\",\n\t\t\twrapfn: \"$scramjet$wrap\",\n\t\t\ttrysetfn: \"$scramjet$tryset\",\n\t\t\timportfn: \"$scramjet$import\",\n\t\t\trewritefn: \"$scramjet$rewrite\",\n\t\t\tmetafn: \"$scramjet$meta\",\n\t\t\tsetrealmfn: \"$scramjet$setrealm\",\n\t\t\tpushsourcemapfn: \"$scramjet$pushsourcemap\",\n\t\t\twasm: \"/scramjet.wasm.js\",\n\t\t\tshared: \"/scramjet.shared.js\",\n\t\t\tworker: \"/scramjet.worker.js\",\n\t\t\tthread: \"/scramjet.thread.js\",\n\t\t\tclient: \"/scramjet.client.js\",\n\t\t\tcodecs: \"/scramjet.codecs.js\",\n\t\t\tsync: \"/scramjet.sync.js\",\n\t\t\tflags: {\n\t\t\t\tserviceworkers: false,\n\t\t\t\tnaiiveRewriter: false,\n\t\t\t\tcaptureErrors: true,\n\t\t\t\tsyncxhr: false,\n\t\t\t\tcleanerrors: false,\n\t\t\t\tsourcemaps: false,\n\t\t\t},\n\t\t};\n\n\t\tthis.config = Object.assign({}, defaultConfig, config);\n\t}\n\n\tasync init(serviceWorkerPath: string): Promise<ServiceWorkerRegistration> {\n\t\tawait import(/* webpackIgnore: true */ this.config.codecs);\n\t\tthis.codec = self.$scramjet.codecs[this.config.codec];\n\n\t\tthis.store = new IDBMap(\"config\", {\n\t\t\tprefix: \"scramjet\",\n\t\t});\n\t\tawait this.#saveConfig();\n\n\t\tconst reg = await navigator.serviceWorker.register(serviceWorkerPath);\n\t\tdbg.log(\"service worker registered\");\n\n\t\treturn reg;\n\t}\n\n\tcreateFrame(frame?: HTMLIFrameElement): ScramjetFrame {\n\t\tif (!frame) {\n\t\t\tframe = document.createElement(\"iframe\");\n\t\t}\n\n\t\treturn new ScramjetFrame(this, frame);\n\t}\n\n\tencodeUrl(url: string | URL): string {\n\t\tif (url instanceof URL) url = url.toString();\n\n\t\treturn this.config.prefix + this.codec.encode(url);\n\t}\n\n\tasync #saveConfig() {\n\t\tthis.store.set(\"config\", this.config);\n\t}\n\n\tasync modifyConfig(config: ScramjetConfig) {\n\t\tthis.config = Object.assign({}, this.config, config);\n\t\tthis.codec = self.$scramjet.codecs[this.config.codec];\n\n\t\tawait this.#saveConfig();\n\t}\n}\n\nwindow.ScramjetController = ScramjetController;\n"],"names":["SCRAMJETCLIENT","SCRAMJETFRAME","ScramjetFrame","EventTarget","controller","frame","url","URL","dbg","severity","message","args","old","Error","_","stack","fmt","i","Math","e","fn","console","bg","fg","padding","Symbol","IDBMap","ScramjetController","config","defaultConfig","Object","serviceWorkerPath","self","reg","navigator","document","window"],"mappings":";;;;;;;;;;AAE2D;AAEpD,MAAME,sBAAsBC;;;IAClC,YACC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNF,iEAAe;IACd,KAAK,SAAUM,QAAgB,EAAEC,OAAe,EAAE,GAAGC,IAAW;QAC/D,MAAMC,MAAMC,MAAM,iBAAiB;QAEnCA,MAAM,iBAAiB,GAAG,CAACC,GAAGC;YAC7BA,MAAM,KAAK,IAAI,WAAW;YAC1BA,MAAM,KAAK,IAAI,SAAS;YACxBA,MAAM,KAAK;YAEX,IAAIC,MAAM;YACV,IAAK,IAAIC,IAAI,GAAGA,IAAIC,KAAK,GAAG,CAAC,GAAGH,MAAM,MAAM,GAAGE,IAAK;gBACnD,IAAIF,KAAK,CAACE,EAAE,CAAC,eAAe,IAAI;oBAC/B,mDAAmD;oBACnD,wBAAwB;oBACxBD,OAAO,GAAGD,KAAK,CAACE,EAAE,CAAC,eAAe,GAAG,IAAI,CAAC,GAAGD;gBAC9C;YACD;YAEAA,OAAOD,KAAK,CAAC,EAAE,CAAC,eAAe;YAE/B,OAAOC;QACR;QAEA,MAAMA,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBd,qCAAqC;AAC9B,MAAMhB,iBAAiByB,OAAO,GAAG,CAAC,0BAA0B;AAC5D,MAAMxB,gBAAgBwB,OAAO,GAAG,CAAC,yBAAyB;;;;;;;;;ACFjE,QAAQ,SAAS;;AAEjB;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,UAAU,kCAAkC;AAC5C,UAAU,QAAQ;AAClB;;AAEA,cAAc,wBAAwB;;AAEtC,WAAW,eAAe;AAC1B,yBAAyB;;AAEzB;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa;AACb;AACA,kBAAkB,UAAU,UAAU;;AAEvB;AACf;AACA,aAAa,sBAAsB;AACnC,aAAa,eAAe;AAC5B,aAAa,QAAQ;;AAErB;AACA;AACA,aAAa,0CAA0C;AACvD,aAAa,0BAA0B;AACvC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,0BAA0B,aAAa,GAAG,KAAK;AAC/C;AACA,4BAA4B,UAAU,uBAAuB;AAC7D;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,wCAAwC;AACrD,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3M4C;AAIJ;AAEjC,MAAME;IACZ,OAAuB;IACf,MAAc;IACtB,MAAa;IAEb,YAAYC,MAAsB,CAAE;QACnC,MAAMC,gBAAyC;YAC9C,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,WAAW;YACX,QAAQ;YACR,YAAY;YACZ,iBAAiB;YACjB,MAAM;YACN,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,MAAM;YACN,OAAO;gBACN,gBAAgB;gBAChB,gBAAgB;gBAChB,eAAe;gBACf,SAAS;gBACT,aAAa;gBACb,YAAY;YACb;QACD;QAEA,IAAI,CAAC,MAAM,GAAGC,OAAO,MAAM,CAAC,CAAC,GAAGD,eAAeD;IAChD;IAEA,MAAM,KAAKG,iBAAyB,EAAsC;QACzE,MAAM,MAAM,CAAC,uBAAuB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM;QACzD,IAAI,CAAC,KAAK,GAAGC,KAAK,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAErD,IAAI,CAAC,KAAK,GAAG,IAAIN,8DAAMA,CAAC,UAAU;YACjC,QAAQ;QACT;QACA,MAAM,IAAI,CAAC,WAAW;QAEtB,MAAMO,MAAM,MAAMC,UAAU,aAAa,CAAC,QAAQ,CAACH;QACnDvB,GAAGA,CAAC,GAAG,CAAC;QAER,OAAOyB;IACR;IAEA,YAAY5B,KAAyB,EAAiB;QACrD,IAAI,CAACA,OAAO;YACXA,QAAQ8B,SAAS,aAAa,CAAC;QAChC;QAEA,OAAO,IAAIjC,iDAAaA,CAAC,IAAI,EAAEG;IAChC;IAEA,UAAUC,GAAiB,EAAU;QACpC,IAAIA,eAAeC,KAAKD,MAAMA,IAAI,QAAQ;QAE1C,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAACA;IAC/C;IAEA,MAAM,WAAW;QAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,MAAM;IACrC;IAEA,MAAM,aAAasB,MAAsB,EAAE;QAC1C,IAAI,CAAC,MAAM,GAAGE,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAEF;QAC7C,IAAI,CAAC,KAAK,GAAGI,KAAK,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QAErD,MAAM,IAAI,CAAC,WAAW;IACvB;AACD;AAEAI,OAAO,kBAAkB,GAAGT"}